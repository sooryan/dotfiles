                                        ;: -*- mode: emacs-lisp -*-
                                        ; This file is loaded by Spacemacs at startup.
;; It must be stored in your home directory.

(defun dotspacemacs/layers ()
  "Configuration Layers declaration.
  You should not put any user code in this function besides
  modifying the variable values."
  (setq-default
   ;; Base distribution to use. This is a layer contained in the directory
   ;; `+distribution'. For now available distributions are `spacemacs-base'
   ;; or `spacemacs'. (default 'spacemacs) dotspacemacs-distribution 'spacemacs
   ;; Lazy installation of layers (i.e. layers are installed only when a file
   ;; with a supported type is opened). Possible values are `all', `unused'
   ;; and `nil'. `unused' will lazy install only unused layers (i.e. layers
   ;; not listed in variable `dotspacemacs-configuration-layers'), `all' will
   ;; lazy install any layer that support lazy installation even the layers
   ;; listed in `dotspacemacs-configuration-layers'. `nil' disable the lazy
   ;; installation feature and you have to explicitly list a layer in the
   ;; variable `dotspacemacs-configuration-layers' to install it.
   ;; (default 'unused) dotspacemacs-enable-lazy-installation 'unused
   ;; If non-nil then Spacemacs will ask for confirmation before installing
   ;; a layer lazily. (default t) dotspacemacs-ask-for-lazy-installation 't
   ;; If non-nil layers with lazy install support are lazy installed.
   ;; List of additional paths where to look for configuration layers.
   ;; Paths must have a trailing slash (i.e. `~/.mycontribs/') dotspacemacs-configuration-layer-path '("~/spacemacs/layers/")
   ;; List of configuration layers to load.
   dotspacemacs-configuration-layers
   '(
     ;; ----------------------------------------------------------------
     ;; Example of useful layers you may want to use right away.
     ;; Uncomment some layer names and press <SPC f e R> (Vim style) o
     ;; <M-m f e R> (Emacs style) to install them.
     ;; ----------------------------------------------------------------
     asm
     (auto-completion :variables
                      auto-completion-enable-help-tooltip t
                      auto-completion-enable-snippets-in-popup t)
     better-defaults
     (c-c++ :variables
            c-c++-adopt-subprojects t c-c++-default-mode-for-headers'c++-mode
            c-c++-backend 'lsp-clangd c-c++-lsp-sem-highlight-rainbow
            t c-c++-lsp-sem-highlight-method 'font-lock
            c-c++-enable-clang-format-on-save t)
     (cmake :variables cmake-enable-cmake-ide-support
            t)
     csharp
     csv
     dash
     ;;(elfeed :variables
     ;;	 rmh-get information elfeed-org-files (list "~/spacemacs/elfeed.org")
     ;;	 elfeed-enable-web-interface t
     ;;	 )
     emacs-lisp
     games
     git
     github
     html
     (haskell
      :variables
      haskell-completion-backend 'dante
      haskell-process-suggest-remove-import-lines nil
      lsp-haskell-process-path-hie "haskell-language-server-wrapper"
      )
     helm
     neotree
     (ibuffer :variables ibuffer-group-buffers-by'projects)
     ipython-notebook
     javascript
     (julia :variables julia-backend'lsp)
     latex
     lsp
     markdown
     (org :variables org-enable-github-support
          t)
     python
     rust
     (shell :variables shell-default-shell'term
            shell-default-term-shell "/usr/bin/zsh" shell-default-height
            50 shell-default-position 'bottom)
     selectric
     semantic
     (spell-checking :variables enable-flyspell-auto-completion
                     t spell-checking-enable-by-default nil)
     (syntax-checking :variables syntax-checking-enable-by-default
                      nil)
     systemd
     (treemacs :variables treemacs-use-follow-mode'tag
               treemacs-use-filewatch-mode t treemacs-use-git-mode
               'deferred treemacs-collapse-dirs 3)
     version-control
     vimscript
     windows-scripts
     xkcd
     yaml)
   ;; List of additional packages that will be installed without being
   ;; wrapped in a layer. If you need some configuration for these
   ;; packages, then consider creating a layer. You can also put the
   ;; configuration in `dotspacemacs/user-config'.
   dotspacemacs-additional-packages
   '(material-theme solarized-theme editorconfig
                    helm-cscope gruvbox-theme minimal-theme doom-themes
                    monokai-theme cmake-mode nyan-mode pkgbuild-mode
                    bison-mode darkroom sicp rmsbolt pretty-mode exwm
                    eglot-jl)
   ;; A list of packages that cannot be updated.
   dotspacemacs-frozen-packages
   '()
   ;; A list of packages that will not be installed and loaded.
   dotspacemacs-excluded-packages
   '()
   ;; Defines the behaviour of Spacemacs when installing packages.
   ;; Possible values are `used-only', `used-but-keep-unused' and `all'.
   ;; `used-only' installs only explicitly used packages and uninstall any
   ;; unused packages as well as their unused dependencies.
   ;; `used-but-keep-unused' installs only the used packages but won't uninstall
   ;; them if they become unused. `all' installs *all* packages supported by
   ;; Spacemacs and never uninstall them. (default is `used-only')
   dotspacemacs-install-packages
   'used-only))

(defun dotspacemacs/init ()
  "Initialization function.
This function is called at the very startup of Spacemacs initialization
before layers configuration.
You should not put any user code in there besides modifying the variable
values."
  ;; This setq-default sexp is an exhaustive list of all the supported
  ;; spacemacs settings.
  (setq-default
   ;; If non nil ELPA repositories are contacted via HTTPS whenever it's
   ;; possible. Set it to nil if you have no way to use HTTPS in your
   ;; environment, otherwise it is strongly recommended to let it set to t.
   ;; This variable has no effect if Emacs is launched with the parameter
   ;; `--insecure' which forces the value of this variable to nil.
   ;; (default t) dotspacemacs-elpa-https t
   ;; Maximum allowed time in seconds to contact an ELPA repository. dotspacemacs-elpa-timeout 5
   ;; If non nil then spacemacs will check for updates at startup
   ;; when the current branch is not `develop'. Note that checking for
   ;; new versions works via git commands, thus it calls GitHub services
   ;; whenever you start Emacs. (default nil) dotspacemacs-check-for-update t
   ;; If non-nil, a form that evaluates to a package directory. For example, to
   ;; use different package directories for different Emacs versions, set this
   ;; to `emacs-version'. dotspacemacs-elpa-subdirectory nil
   ;; One of `vim', `emacs' or `hybrid'.
   ;; `hybrid' is like `vim' except that `insert state' is replaced by the
   ;; `hybrid state' with `emacs' key bindings. The value can also be a list
   ;; with `:variables' keyword (similar to layers). Check the editing styles
   ;; section of the documentation for details on available variables.
   ;; (default 'vim)
   dotspacemacs-editing-style
   'vim
   ;; If non nil output loading progress in `*Messages*' buffer. (default nil)
   dotspacemacs-verbose-loading
   nil
   ;; Specify the startup banner. Default value is `official', it displays
   ;; the official spacemacs logo. An integer value is the index of text
   ;; banner, `random' chooses a random text banner in `core/banners'
   ;; directory. A string value must be a path to an image format supported
   ;; by your Emacs build.
   ;; If the value is nil then no banner is displayed. (default 'official)
   dotspacemacs-startup-banner
   'random
   ;; List of items to show in startup buffer or an association list of
   ;; the form `(list-type . list-size)`. If nil then it is disabled.
   ;; Possible values for list-type are:
   ;; `recents' `bookmarks' `projects' `agenda' `todos'."
   ;; List sizes may be nil, in which case
   ;; `spacemacs-buffer-startup-lists-length' takes effect.
   dotspacemacs-startup-lists
   '((recents . 5)
     (projects . 7))
   ;; True if the home buffer should respond to resize events.
   dotspacemacs-startup-buffer-responsive
   t
   ;; Default major mode of the scratch buffer (default `text-mode')
   dotspacemacs-scratch-mode
   'org-mode
   ;; List of themes, the first of the list is loaded when spacemacs starts.
   ;; Press <SPC> T n to cycle to the next theme in the list (works great
   ;; with 2 themes variants, one dark and one light)
   dotspacemacs-themes
   '(doom-nord doom-peacock gruvbox
               nord solarized-dark doom-peacock minimal monokai
               spacemacs-dark spacemacs-light)
   dotspacemacs-mode-line-theme
   '(spacemacs :separator wave
               :separator-scale 1.5)
   ;; If non nil the cursor color matches the state color in GUI Emacs.
   dotspacemacs-colorize-cursor-according-to-state
   t
   ;; Default font, or prioritized list of fonts. `powerline-scale' allows to
   ;; quickly tweak the mode-line size to make separators look not too crappy.
   dotspacemacs-default-font
   '(("Fantasque Sans Mono" :size 15
      :weight medium
      :width normal
      :powerline-scale 1.1)
     ("Fira Code Symbol" :size 15
      :weight normal
      :width normal
      :powerline-scale 1.1))
   ;; The leader key
   dotspacemacs-leader-key
   "SPC"
   ;; The key used for Emacs commands (M-x) (after pressing on the leader key).
   ;; (default "SPC")
   dotspacemacs-emacs-command-key
   "SPC"
   ;; The key used for Vim Ex commands (default ":")
   dotspacemacs-ex-command-key
   ":"
   ;; The leader key accessible in `emacs state' and `insert state'
   ;; (default "M-m")
   dotspacemacs-emacs-leader-key
   "M-m"
   ;; Major mode leader key is a shortcut key which is the equivalent of
   ;; pressing `<leader> m`. Set it to `nil` to disable it. (default ",")
   dotspacemacs-major-mode-leader-key
   ","
   ;; Major mode leader key accessible in `emacs state' and `insert state'.
   ;; (default "C-M-m")
   dotspacemacs-major-mode-emacs-leader-key
   "C-M-m"
   ;; These variables control whether separate commands are bound in the GUI to
   ;; the key pairs C-i, TAB and C-m, RET.
   ;; Setting it to a non-nil value, allows for separate commands under <C-i>
   ;; and TAB or <C-m> and RET.
   ;; In the terminal, these pairs are generally indistinguishable, so this only
   ;; works in the GUI. (default nil)
   dotspacemacs-distinguish-gui-tab
   nil
   ;; If non nil `Y' is remapped to `y$' in Evil states. (default nil)
   dotspacemacs-remap-Y-to-y$
   t
   ;; If non-nil, the shift mappings `<' and `>' retain visual state if used
   ;; there. (default t)
   dotspacemacs-retain-visual-state-on-shift
   t
   ;; If non-nil, J and K move lines up and down when in visual mode.
   ;; (default nil)
   dotspacemacs-visual-line-move-text
   nil
   ;; If non nil, inverse the meaning of `g' in `:substitute' Evil ex-command.
   ;; (default nil)
   dotspacemacs-ex-substitute-global
   nil
   ;; Name of the default layout (default "Default")
   dotspacemacs-default-layout-name
   "Default"
   ;; If non nil the default layout name is displayed in the mode-line.
   ;; (default nil)
   dotspacemacs-display-default-layout
   nil
   ;; If non nil then the last auto saved layouts are resume automatically upon
   ;; start. (default nil)
   dotspacemacs-auto-resume-layouts
   t
   ;; Size (in MB) above which spacemacs will prompt to open the large file
   ;; literally to avoid performance issues. Opening a file literally means that
   ;; no major mode or minor modes are active. (default is 1)
   dotspacemacs-large-file-size
   1
   ;; Location where to auto-save files. Possible values are `original' to
   ;; auto-save the file in-place, `cache' to auto-save the file to another
   ;; file stored in the cache directory and `nil' to disable auto-saving.
   ;; (default 'cache)
   dotspacemacs-auto-save-file-location
   'cache
   ;; Maximum number of rollback slots to keep in the cache. (default 5)
   dotspacemacs-max-rollback-slots
   5
   ;; If non nil, `helm' will try to minimize the space it uses. (default nil)
   dotspacemacs-helm-resize
   nil
   ;; if non nil, the helm header is hidden when there is only one source.
   ;; (default nil)
   dotspacemacs-helm-no-header
   nil
   ;; define the position to display `helm', options are `bottom', `top',
   ;; `left', or `right'. (default 'bottom)
   dotspacemacs-helm-position
   'bottom
   ;; Controls fuzzy matching in helm. If set to `always', force fuzzy matching
   ;; in all non-asynchronous sources. If set to `source', preserve individual
   ;; source settings. Else, disable fuzzy matching in all sources.
   ;; (default 'always)
   dotspacemacs-helm-use-fuzzy
   'always
   ;; If non nil the paste micro-state is enabled. When enabled pressing `p`
   ;; several times cycle between the kill ring content. (default nil)
   dotspacemacs-enable-paste-transient-state
   nil
   ;; Which-key delay in seconds. The which-key buffer is the popup listing
   ;; the commands bound to the current keystroke sequence. (default 0.4)
   dotspacemacs-which-key-delay
   0.4
   ;; Which-key frame position. Possible values are `right', `bottom' and
   ;; `right-then-bottom'. right-then-bottom tries to display the frame to the
   ;; right; if there is insufficient space it displays it at the bottom.
   ;; (default 'bottom)
   dotspacemacs-which-key-position
   'bottom
   ;; If non nil a progress bar is displayed when spacemacs is loading. This
   ;; may increase the boot time on some systems and emacs builds, set it to
   ;; nil to boost the loading time. (default t)
   dotspacemacs-loading-progress-bar
   t
   ;; If non nil the frame is fullscreen when Emacs starts up. (default nil)
   ;; (Emacs 24.4+ only)
   dotspacemacs-fullscreen-at-startup
   nil
   ;; If non nil `spacemacs/toggle-fullscreen' will not use native fullscreen.
   ;; Use to disable fullscreen animations in OSX. (default nil)
   dotspacemacs-fullscreen-use-non-native
   nil
   ;; If non nil the frame is maximized when Emacs starts up.
   ;; Takes effect only if `dotspacemacs-fullscreen-at-startup' is nil.
   ;; (default nil) (Emacs 24.4+ only)
   dotspacemacs-maximized-at-startup
   nil
   ;; A value from the range (0..100), in increasing opacity, which describes
   ;; the transparency level of a frame when it's active or selected.
   ;; Transparency can be toggled through `toggle-transparency'. (default 90)
   dotspacemacs-active-transparency
   90
   ;; A value from the range (0..100), in increasing opacity, which describes
   ;; the transparency level of a frame when it's inactive or deselected.
   ;; Transparency can be toggled through `toggle-transparency'. (default 90)
   dotspacemacs-inactive-transparency
   90
   ;; If non nil show the titles of transient states. (default t)
   dotspacemacs-show-transient-state-title
   t
   ;; If non nil show the color guide hint for transient state keys. (default t)
   dotspacemacs-show-transient-state-color-guide
   t
   ;; If non nil unicode symbols are displayed in the mode line. (default t)
   dotspacemacs-mode-line-unicode-symbols
   t
   ;; If non nil smooth scrolling (native-scrolling) is enabled. Smooth
   ;; scrolling overrides the default behavior of Emacs which recenters point
   ;; when it reaches the top or bottom of the screen. (default t)
   dotspacemacs-smooth-scrolling
   t
   ;; If non nil line numbers are turned on in all `prog-mode' and `text-mode'
   ;; derivatives. If set to `relative', also turns on relative line numbers.
   ;; (default nil)
   dotspacemacs-line-numbers
   '(:visual t :disabled-for-modes dired-mode
     doc-view-mode pdf-view-mode :size-limit-kb 1000)
   ;; Code folding method. Possible values are `evil' and `origami'.
   ;; (default 'evil)
   dotspacemacs-folding-method
   'evil
   ;; If non-nil smartparens-strict-mode will be enabled in programming modes.
   ;; (default nil)
   dotspacemacs-smartparens-strict-mode
   nil
   ;; If non-nil pressing the closing parenthesis `)' key in insert mode passes
   ;; over any automatically added closing parenthesis, bracket, quote, etc…
   ;; This can be temporary disabled by pressing `C-q' before `)'. (default nil)
   dotspacemacs-smart-closing-parenthesis
   nil
   ;; Select a scope to highlight delimiters. Possible values are `any',
   ;; `current', `all' or `nil'. Default is `all' (highlight any scope and
   ;; emphasis the current one). (default 'all)
   dotspacemacs-highlight-delimiters
   'all
   ;; If non nil, advise quit functions to keep server open when quitting.
   ;; (default nil)
   dotspacemacs-persistent-server
   nil
   ;; List of search tool executable names. Spacemacs uses the first installed
   ;; tool of the list. Supported tools are `ag', `pt', `ack' and `grep'.
   ;; (default '("ag" "pt" "ack" "grep"))
   dotspacemacs-search-tools
   '("ag" "pt" "ack" "grep")
   ;; The default package repository used if no explicit repository has been
   ;; specified with an installed package.
   ;; Not used for now. (default nil)
   dotspacemacs-default-package-repository
   nil
   ;; Delete whitespace while saving buffer. Possible values are `all'
   ;; to aggressively delete empty line and long sequences of whitespace,
   ;; `trailing' to delete only the whitespace at end of lines, `changed'to
   ;; delete only whitespace for changed lines or `nil' to disable cleanup.
   ;; (default nil)
   dotspacemacs-whitespace-cleanup
   'changed))

(defun dotspacemacs/user-init ()
  "Initialization function for user code.
  It is called immediately after `dotspacemacs/init', before
  layer configuration executes.  This function is mostly useful
  for variables that need to be set before packages are loaded.
  If you are unsure, you should try in setting them in
  `dotspacemacs/user-config' first."
  (setq evil-want-abbrev-expand-on-insert-exit
        nil)
  (setq-default evil-escape-key-sequence "kj")
  (setq nord-comment-brightness 14)
  (setq nord-region-highlight "snowstorm"))

(defun dotspacemacs/user-config ()
  "CONFIGURATION function for user code.
  This function is called at the very end of Spacemacs
  initialization after layers configuration.  This is the place
  where most of your configurations should be done.  Unless it
  is explicitly specified that a variable should be set before
  a package is loaded, you should place your code here."
  ;; Font Ligatures
  ;; (defun my-correct-symbol-bounds (pretty-alist)
  ;; 	"Prepend a TAB character to each symbol in this alist,
  ;; this way compose-region called by prettify-symbols-mode
  ;; will use the correct width of the symbols
  ;; instead of the width measured by char-width."
  ;; 	(mapcar (lambda (el)
  ;; 			  (setcdr el (string ?\t (cdr el)))
  ;; 			  el)
  ;; 			pretty-alist))

  ;; (defun my-ligature-list (ligatures codepoint-start)
  ;; 	"Create an alist of strings to replace with
  ;; codepoints starting from codepoint-start."
  ;; 	(let ((codepoints (-iterate '1+ codepoint-start (length ligatures))))
  ;; 	  (-zip-pair ligatures codepoints)))

  ;; (setq my-fira-code-ligatures
  ;; 		(let* ((ligs '("www" "**" "***" "**/" "*>" "*/" "\\\\" "\\\\\\"
  ;; 					   "{-" "[]" ":::" ":=" "!!" "!=" "!==" "-}"
  ;; 					   "--" "---" "-->" "->" "->>" "-<" "-<<" "-~"
  ;; 					   "#{" "#[" "##" "###" "####" "#(" "#?" "#_" "#_("
  ;; 					   ".-" ".=" ".." "..<" "..." "?=" "??" ";;" "/*"
  ;; 					   "/**" "/=" "/==" "/>" "//" "///" "&&" "||" "||="
  ;; 					   "|=" "|>" "^=" "$>" "++" "+++" "+>" "=:=" "=="
  ;; 					   "===" "==>" "=>" "=>>" "<=" "=<<" "=/=" ">-" ">="
  ;; 					   ">=>" ">>" ">>-" ">>=" ">>>" "<*" "<*>" "<|" "<|>"
  ;; 					   "<$" "<$>" "<!--" "<-" "<--" "<->" "<+" "<+>" "<="
  ;; 					   "<==" "<=>" "<=<" "<>" "<<" "<<-" "<<=" "<<<" "<~"
  ;; 					   "<~~" "</" "</>" "~@" "~-" "~=" "~>" "~~" "~~>" "%%"
  ;; 					   "x" ":" "+" "+" "*")))
  ;; 		  (my-correct-symbol-bounds (my-ligature-list ligs #Xe100))))

  ;; (defun my-set-fira-code-ligatures ()
  ;; 	"Add fira code ligatures for use with prettify-symbols-mode."
  ;; 	(setq prettify-symbols-alist
  ;; 		  (append my-fira-code-ligatures prettify-symbols-alist))
  ;; 	(prettify-symbols-mode))

  ;; (add-hook 'prog-mode-hook 'my-set-fira-code-ligatures)
  ;; Mine
  (defun stop-using-minibuffer ()
    "kill the minibuffer"
    (when (and (>= (recursion-depth) 1)
               (active-minibuffer-window))
      (abort-recursive-edit)))
  (add-hook 'mouse-leave-buffer-hook 'stop-using-minibuffer)
  (editorconfig-mode 1)
  ;; (setq projectile-git-command "git-ls-all-files")
  ;; (with-eval-after-load 'intero
  ;; 	(flycheck-add-next-checker 'intero '(warning . haskell-hlint)))
  (global-prettify-symbols-mode 1)
  (define-key evil-insert-state-map (kbd "M-RET") 'org-meta-return)
  ;; (use-package dante
  ;; :ensure t
  ;; :after haskell-mode
  ;; :commands 'dante-mode
  ;; :init
  ;; (add-hook 'haskell-mode-hook 'dante-mode))
  ;; ;; (add-hook 'haskell-mode-hook 'flycheck-mode))
  ;; ;; (setq dante-repl-command-line  '("/path/to/reflex-project-skeleton/cabal"     "new-repl"))
  ;; (evil-leader/set-key-for-mode 'haskell-mode
  ;;   "x" 'xref-find-definitions
  ;;   "a" 'dante-type-at
  ;;   "z" 'dante-info)
  (use-package dante
    :ensure t
    :after haskell-mode
    :commands 'dante-mode
    :init (add-hook 'haskell-mode-hook 'flycheck-mode)(add-hook 'haskell-mode-hook 'dante-mode))
  (add-hook 'dante-mode-hook
            '(lambda ()
               (flycheck-add-next-checker 'haskell-dante
                                          '(warning . haskell-hlint))))
  ;; (define-key evil-insert-state-map (kbd "<return>") 'org-return)
  (add-to-list 'auto-mode-alist
               '("\\.g\\'" . gnuplot-mode))
  (add-to-list 'auto-mode-alist
               '("\\.tpp\\'" . c++-mode))
  (add-to-list 'auto-mode-alist
               '("\\.fbs\\'" . idl-mode))
  (add-to-list 'load-path "/home/soorya/spacemacs")
  ;; (load-theme 'nord t)
  ;; show line numbers
  ;; (global-linum-mode t)
  ;; UTF-8
  (set-language-environment 'utf-8)
  (set-default-coding-systems 'utf-8)
  (set-selection-coding-system 'utf-8)
  (set-locale-environment "en.utf-8")
  (prefer-coding-system 'utf-8)
  ;; (setq utf-translate-cjk-mode nil) ; disable cjk coding/encoding
  (setq evil-want-fine-undo t)
  ;; Alt + Up/Down to move block of selected text up/down
  (require 'move-text)
  (require 'darkroom)
  (require 'writeroom-mode)
  (move-text-default-bindings)
  ;; (menu-bar-mode t)
  (global-set-key (kbd "M-f")
                  'menu-bar-open)
  (setq-default neo-theme 'arrow)
  (setq-default whitespace-line-column 80
                whitespace-style
                '(face lines-tail))
  ;; Copy, paste And cut
  (global-set-key (kbd "C-x c")
                  'clipboard-kill-ring-save)
  (global-set-key (kbd "C-x p")
                  'clipboard-yank)
  (global-set-key (kbd "C-x x")
                  'clipboard-kill-region)
  ;; delete line
  (global-set-key (kbd "<delete>")
                  'delete-region)
  ;; terminal
  ;; (setq system-uses-terminfo nil)
  ;; C/C++ mode customizations
  (global-set-key (kbd "C-x b")
                  'omnisharp-code-format-entire-file)
  (setq indent-line-function 'insert-tab)
  ;; Text scaling
  (define-key global-map (kbd "C-+") 'text-scale-increase)
  (define-key global-map (kbd "C-=") 'text-scale-increase)
  (define-key global-map (kbd "C--") 'text-scale-decrease)
  ;; Smooth Scrolling attempt
  (setq mouse-wheel-scroll-amount '(1
                                    ((shift) . 1))) ;; one line at a time
  (setq mouse-wheel-progressive-speed nil) ;; don't accelerate scrolling
  (setq mouse-wheel-follow-mouse 't) ;; scroll window under mouse
  (setq scroll-step 1) ;; keyboard scroll one line at a time
  (setq cmake-ide-cmake-opts "-DCMAKE_BUILD_TYPE=Release -GNinja")
  (setq helm-make-arguments "-j7")
  ;; (require 'sublimity)
  ;; (require 'sublimity-scroll)
  ;; (sublimity-mode 1)
  ;; (setq sublimity-scroll-weight 2 sublimity-scroll-drift-length
  ;;       5)
  ;; make these keys behave like normal browser
  (defun webkit-setup ()
    (define-key xwidget-webkit-mode-map (kbd "<mouse-4>") 'xwidget-webkit-scroll-down)
    (define-key xwidget-webkit-mode-map (kbd "<mouse-5>") 'xwidget-webkit-scroll-up)
    (define-key xwidget-webkit-mode-map (kbd "<up>") 'xwidget-webkit-scroll-down)
    (define-key xwidget-webkit-mode-map (kbd "<down>") 'xwidget-webkit-scroll-up)
    (define-key xwidget-webkit-mode-map (kbd "M-w") 'xwidget-webkit-copy-selection-as-kill)
    (define-key xwidget-webkit-mode-map (kbd "C-c") 'xwidget-webkit-copy-selection-as-kill))
  (add-hook 'xwidget-webkit-mode-hook 'webkit-setup)
  (defun c++-setup ()
    (setq-default tab-stop-list '(4 8 12 16 20 24 28 32 36 40 44 48 52 56 60
                                    64 68 72 76 80 84 88 92)
                  indent-tabs-mode
                  t
                  tab-width
                  4
                  fill-column
                  72))
  (add-hook 'c++-mode-hook 'c++-setup)
  (add-hook 'c-mode-hook 'c++-setup)
  (nyan-mode t)
  ;; (setq-default org-bullets-bullet-list '("" "" "▲" "▶"))
  (global-set-key (kbd "<C-down>")
                  'shrink-window)
  (global-set-key (kbd "<C-up>")
                  'enlarge-window)
  (global-set-key (kbd "<C-right>")
                  'shrink-window-horizontally)
  (global-set-key (kbd "<C-left>")
                  'enlarge-window-horizontally)
  (setq-default projectile-indexing-method 'alien)
  (setq-default projectile-enable-caching t)
  (setq neo-theme 'nerd)
  (defun neotree-project-dir ()
    "Open NeoTree using the git root."
    (interactive)
    (let ((project-dir (projectile-project-root))
          (file-name (buffer-file-name)))
      (neotree-toggle)
      (if project-dir
          (if (neo-global--window-exists-p)
              (progn
                (neotree-dir project-dir)
                (neotree-find file-name)))
        (message "Could not find git project root."))))
  ;; default

  ;; don't save message to Sent Messages, GMail/IMAP will take care of this
  ;; (setq mu4e-sent-messages-behavior 'delete)
  ;; (setq-default mu4e-maildir "~/Maildir")
  ;; ;; setup some handy shortcuts

  ;; (setq mail-user-agent 'mu4e-user-agent)
  ;; ;; allow for updating mail using 'U' in the main view:
  ;; (setq-default mu4e-get-mail-command "offlineimap")
  ;; (setq user-full-name "J M Soorya Narayan"
  ;;       smtpmail-smtp-server
  ;;       "smtp.gmail.com"
  ;;       smtpmail-default-smtp-server
  ;;       "smtp.gmail.com"
  ;;       smtpmthan ail-starttls-credentials
  ;;       '(("smtp.gmail.com" 587 nil nil))
  ;;       smtpmail-stream-type
  ;;       'starttls
  ;;       ;; mu4e-sent-messages-behavior delete
  ;;       smtpmail-smtp-service
  ;;       587)
  ;; (setq-default mu4e-account-alist '(("Personal"
  ;;                             (mu4e-sent-folder "/Personal/[Gmail].Sent Mail")
  ;;                             (mu4e-drafts-folder "/Personal/[Gmail].Drafts")
  ;;                             (mu4e-trash-folder "/Personal/[Gmail].Trash")
  ;;                             (user-mail-address "soorya.art@gmail.com")
  ;;                             (smtpmail-auth-credentials '(("smtp.gmail.com" 587 "soorya.art@gmail.com"
  ;;                                                           nil))))
  ;;                            ("Professional"
  ;;                             (mu4e-sent-folder "/Professional/[Gmail].Sent Mail")
  ;;                             (mu4e-drafts-folder "/Professional/[Gmail].Drafts")
  ;;                             (mu4e-trash-folder "/Professional/[Gmail].Trash")
  ;;                             (user-mail-address "soorya.narayan.jm@gmail.com")
  ;;                             (smtpmail-auth-credentials '(("smtp.gmail.com" 587 "soorya.narayan.jm@gmail.com"
  ;;                                                           nil))))
  ;;                            ("Dev"
  ;;                             (mu4e-sent-folder "/Dev/[Gmail].Sent Mail")
  ;;                             (mu4e-drafts-folder "/Dev/[Gmail].Drafts")
  ;;                             (mu4e-trash-folder "/Dev/[Gmail].Trash")
  ;;                             (user-mail-address "nayaran.ayroos@gmail.com")
  ;;                             (smtpmail-auth-credentials '(("smtp.gmail.com" 587 "nayaran.ayroos@gmail.com"
  ;;                                                           nil))))))
  ;; (mu4e/mail-account-reset)
  ;; (defun my-mu4e-set-account ()
  ;;   "Set the account for composing a message."
  ;;   (let* ((account (if mu4e-compose-parent-message
  ;;                       (let ((maildir (mu4e-message-field mu4e-compose-parent-message
  ;;                                                          :maildir)))
  ;;                         (string-match "/\\(.*?\\)/" maildir)
  ;;                         (match-string 1 maildir))
  ;;                     (completing-read (format "Compose with account: (%s) "
  ;;                                              (mapconcat #'(lambda (var)
  ;;                                                             (car var))
  ;;                                                         mu4e-account-alist
  ;;                                                         "/"))
  ;;                                      (mapcar #'(lambda (var)
  ;;                                                  (car var))
  ;;                                              mu4e-account-alist)
  ;;                                      nil
  ;;                                      t
  ;;                                      nil
  ;;                                      nil
  ;;                                      (caar mu4e-account-alist))))
  ;;          (account-vars (cdr (assoc account mu4e-account-alist))))
  ;;     (if account-vars
  ;;         (mapc #'(lambda (var)
  ;;                   (set (car var)
  ;;                        (cadr var)))
  ;;               account-vars)
  ;;       (error "No email account found"))))
  ;; (add-hook 'mu4e-compose-pre-hook 'my-mu4e-set-account)
  ;; (require 'smtpmail)
  ;; ;; (setq message-send-mail-function 'smtpmail-send-it
  ;;       starttls-use-gnutls t)
  ;; (setq-default message-kill-buffer-on-exit t)
  ;; (with-eval-after-load 'mu4e-alert
  ;;   ;; Enable Desktop notifications
  ;;   (mu4e-alert-set-default-style 'notifications))
  ;; (defun my-render-html-message ()
  ;;   (let ((dom (libxml-parse-html-region (point-min)
  ;;                                        (point-max))))
  ;;     (erase-buffer)
  ;;     (shr-insert-document dom)
  ;;     (goto-char (point-min))))
  ;; (setq-default mu4e-html2text-command 'my-render-html-message)
  )

;; Do not write anything past this comment. This is where Emacs will
;; auto-generate custom variable definitions.
(defun dotspacemacs/emacs-custom-settings ()
  "Emacs custom settings.
This is an auto-generated function, do not modify its content directly, use
Emacs customize menu instead.
This function is called at the very end of Spacemacs initialization."
  (custom-set-variables
   ;; custom-set-variables was added by Custom.
   ;; If you edit it by hand, you could mess it up, so be careful.
   ;; Your init file should contain only one such instance.
   ;; If there is more than one, they won't work right.
   '(custom-safe-themes
     '("1c082c9b84449e54af757bcae23617d11f563fc9f33a832a8a2813c4d7dfb652" "fe666e5ac37c2dfcf80074e88b9252c71a22b6f5d2f566df9a7aa4f9bea55ef8" "d2e9c7e31e574bf38f4b0fb927aaff20c1e5f92f72001102758005e53d77b8c9" "6b2636879127bf6124ce541b1b2824800afc49c6ccd65439d6eb987dbf200c36" "8aebf25556399b58091e533e455dd50a6a9cba958cc4ebb0aab175863c25b9a4" "9129c2759b8ba8e8396fe92535449de3e7ba61fd34569a488dd64e80f5041c9f" "f8067b7d0dbffb29a79e0843797efabdf5e1cf326639874d8b407e9b034136a4" "97965ccdac20cae22c5658c282544892959dc541af3e9ef8857dbf22eb70e82b" "d3e333eaa461c82a124f7e7a7a9637d56fc3019478becb1847952804ca67743e" "725a0ac226fc6a7372074c8924c18394448bb011916c05a87518ad4563738668" "bffa9739ce0752a37d9b1eee78fc00ba159748f50dc328af4be661484848e476" "151bde695af0b0e69c3846500f58d9a0ca8cb2d447da68d7fbf4154dcf818ebc" "bf390ecb203806cbe351b966a88fc3036f3ff68cd2547db6ee3676e87327b311" "a24c5b3c12d147da6cef80938dca1223b7c7f70f2f382b26308eba014dc4833a" "8b4d8679804cdca97f35d1b6ba48627e4d733531c64f7324f764036071af6534" "6d589ac0e52375d311afaa745205abb6ccb3b21f6ba037104d71111e7e76a3fc" "a3fa4abaf08cc169b61dea8f6df1bbe4123ec1d2afeb01c17e11fdc31fc66379" "7f89ec3c988c398b88f7304a75ed225eaac64efa8df3638c815acc563dfd3b55" "e2fd81495089dc09d14a88f29dfdff7645f213e2c03650ac2dd275de52a513de" "cc0dbb53a10215b696d391a90de635ba1699072745bf653b53774706999208e3" "4780d7ce6e5491e2c1190082f7fe0f812707fc77455616ab6f8b38e796cbffa9" "7e78a1030293619094ea6ae80a7579a562068087080e01c2b8b503b27900165c" default))
   '(evil-want-Y-yank-to-eol t)
   '(package-selected-packages
     '(exwm wavefront-obj-mode eglot-jl lsp-julia julia-repl julia-mode dap-mode pretty-symbols vterm symbol-overlay pretty-mode org-superstar lsp-python-ms package-lint lsp-treemacs neotree posframe bui vale-mode flycheck-vale toml-mode racer helm-gtags ggtags flycheck-rust counsel-gtags cargo rust-mode ox-epub cuda-mode ob-ipython polymode jupyter websocket ein treemacs-icons-dired all-the-icons-dired solarized-theme poet-theme darktooth-theme gotham-theme flatui-dark-theme zeal-at-point yasnippet-snippets yapfify yaml-mode xterm-color xkcd x86-lookup ws-butler writeroom-mode visual-fill-column winum web-mode web-beautify volatile-highlights vimrc-mode vi-tilde-fringe uuidgen unfill typit mmt treemacs-projectile treemacs-evil treemacs pfuture toc-org tagedit symon sudoku string-inflection stickyfunc-enhance srefactor spaceline-all-the-icons spaceline powerline smeargle slim-mode sicp shell-pop selectric-mode scss-mode sass-mode rmsbolt restart-emacs rainbow-delimiters pyvenv pytest pyenv-mode py-isort pug-mode prettier-js powershell popwin pkgbuild-mode pippel pipenv pip-requirements persp-mode password-generator paradox pacmacs ox-gfm overseer orgit org-projectile org-category-capture org-present org-pomodoro alert log4e gntp org-mime org-download org-bullets org-brain open-junk-file omnisharp nyan-mode nord-theme nasm-mode nameless mwim multi-term move-text monokai-theme mmm-mode minimal-theme material-theme markdown-toc magithub ghub+ apiwrap magit-svn magit-gitflow macrostep lsp-ui lorem-ipsum livid-mode skewer-mode live-py-mode linum-relative link-hint less-css-mode json-navigator hierarchy json-mode json-snatcher json-reformat js2-refactor multiple-cursors js2-mode js-doc intero indent-guide importmagic epc ctable concurrent deferred impatient-mode simple-httpd ibuffer-projectile hungry-delete htmlize hlint-refactor hl-todo hindent highlight-parentheses highlight-numbers parent-mode highlight-indentation helm-xref helm-themes helm-swoop helm-rtags helm-pydoc helm-purpose window-purpose imenu-list helm-projectile helm-org-rifle helm-mode-manager helm-make helm-hoogle helm-gitignore request helm-git-grep helm-flx helm-descbinds helm-dash helm-ctest helm-css-scss helm-cscope xcscope helm-company helm-c-yasnippet helm-ag haskell-snippets haml-mode gruvbox-theme autothemer google-translate google-c-style golden-ratio gnuplot gitignore-templates gitignore-mode github-search github-clone gitconfig-mode gitattributes-mode git-timemachine git-messenger git-link git-gutter-fringe+ git-gutter-fringe fringe-helper git-gutter+ git-gutter gist gh marshal logito pcache gh-md fuzzy forge markdown-mode ghub closql emacsql-sqlite emacsql treepy let-alist graphql flyspell-popup flyspell-correct-helm flyspell-correct flycheck-rtags flycheck-pos-tip flycheck-haskell haskell-mode flycheck flx-ido flx fill-column-indicator fancy-battery eyebrowse expand-region evil-visualstar evil-visual-mark-mode evil-unimpaired evil-tutor evil-surround evil-org evil-numbers evil-nerd-commenter evil-matchit evil-magit magit magit-popup git-commit with-editor evil-lisp-state evil-lion evil-indent-plus evil-iedit-state iedit evil-goggles evil-exchange evil-escape evil-ediff evil-cleverparens smartparens paredit evil-args evil-anzu anzu eval-sexp-fu eshell-z eshell-prompt-extras esh-help emmet-mode elisp-slime-nav editorconfig dumb-jump doom-themes doom-modeline eldoc-eval shrink-path all-the-icons memoize disaster diff-hl define-word darkroom dactyl-mode cython-mode csv-mode csharp-mode cquery counsel-projectile counsel swiper ivy company-web web-completion-data company-tern tern company-statistics company-rtags rtags company-quickhelp pos-tip company-lsp company-cabal company-c-headers company-auctex company-anaconda company column-enforce-mode cmm-mode cmake-mode cmake-ide levenshtein clean-aindent-mode clang-format centered-cursor-mode ccls projectile lsp-mode spinner ht dash-functional pkg-info epl browse-at-remote bison-mode auto-yasnippet yasnippet auto-highlight-symbol auto-dictionary auto-compile packed auctex anaconda-mode pythonic f dash s aggressive-indent ace-window ace-link ace-jump-helm-line helm avy helm-core ac-ispell auto-complete popup 2048 -game which-key use-package pcre2el org-plus-contrib hydra font-lock+ evil goto-chg undo-tree dotenv-mode diminish bind-map bind-key async))
   '(pdf-view-midnight-colors '("#fdf4c1" . "#1d2021")))
  (custom-set-faces
   ;; custom-set-faces was added by Custom.
   ;; If you edit it by hand, you could mess it up, so be careful.
   ;; Your init file should contain only one such instance.
   ;; If there is more than one, they won't work right.
   )
  )
